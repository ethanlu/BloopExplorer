<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
		   xmlns:mb="bloopComponents.*"
		   styleName="canvas">
  <mx:Metadata>
    [Event(name="selectedRowChanged",type="flash.events.Event")]
    [Event(name="directoryDoubleClicked",type="flash.events.Event")]
    [Event(name="fileDoubleClicked",type="flash.events.Event")]
    [Event(name="itemDropped",type="flash.events.Event")]
  </mx:Metadata>
  <mx:Script>
    <![CDATA[
    	import com.adobe.serialization.json.JSON;
    	import mx.collections.*;
    	import mx.containers.*;
    	import mx.controls.*;
      import mx.core.DragSource;
    	import mx.core.UIComponent;
      import mx.events.*;
      import mx.managers.DragManager;
      import mx.rpc.events.*;
      import bloopComponents.renameItem;
      
      [Bindable] private var _contentArray:Array;
      [Bindable] private var _contentData:ArrayCollection;
      
      public var customEditEnabled:Boolean = false;
      
      private var _currentSortIndex:Number;
      private var _descendingSort:Boolean;
      
      private var _currentHighlightedRow:int = -1;
      private var _lockHighlightChange:Boolean = false;
      
      private var _DATA_URL:String;
      private var _USER_ID:int;
      private var _hiddenAlpha:Number = .5;
      
      private var _droppedRowIndex:int = -1;
      
      ///////////////////////////////////////////////////////////////////////////////////////////
      ///////////////////////////////////////////////////////////////////////////////////////////
      //-private functions
      
      private function _getData(directoryID:Number):void
      {
        this.contentRequest.url = this._DATA_URL;
        this.contentRequest.send({did:directoryID,uid:this._USER_ID});
      }
        
      private function _loadData(e:ResultEvent):void
      {
        var rawData:String = String(e.result);
        var data:Object = JSON.decode(rawData);
        var i:int;
        var tmp:Object;
        this._contentArray = new Array();
        
        //-load directories
        for (i = 0; i < data.directories.length; i++)
        {
          tmp = {did:data.directories[i].directoryID,
                 name:data.directories[i].directoryName,
                 description:'',
                 type:'Folder',
                 size:data.directories[i].subdirectoryCount + ' folders, ' + data.directories[i].fileCount + ' files',
                 views:'',
                 hidden:data.directories[i].directoryPrivate,
                 isFolder:true,
                 iconPath:this._getImagePath(true),
                 alpha:(data.directories[i].directoryPrivate == 1) ? this._hiddenAlpha : 1,
                 dragEnter:this._dragEntered,
                 dragExit:this._dragExited,
                 dragDrop:this._dragDropped,
                 dragComplete:this._dragComplete
          };
          
          this._contentArray.push(tmp);
        }
        
        //-load files
        for (i = 0; i < data.files.length; i++)
        {
          tmp = {fid:data.files[i].fileID,
                 name:data.files[i].fileName,
                 description:data.files[i].fileDescription,
                 type:data.files[i].fileType,
                 size:this._convertSize(data.files[i].fileSize),
                 views:data.files[i].fileViews,
                 hidden:data.files[i].filePrivate,
                 isFolder:false,
                 iconPath:this._getImagePath(false,data.files[i].fileIconType),
                 urlHash:data.files[i].fileURL,
                 alpha:(data.files[i].filePrivate == 1) ? this._hiddenAlpha : 1,
                 dragEnter:this._dragEntered,
                 dragExit:this._dragExited,
                 dragDrop:this._dragDropped,
                 dragComplete:this._dragComplete
          };
          
          this._contentArray.push(tmp);
        }
        
        this._contentData = new ArrayCollection(this._contentArray);
        
        setTimeout(this.contentGrid.validateNow,100);
      }
      
      private function _handleError(e:FaultEvent):void
      {
        Alert.show(e.fault.message, "Error loading files. Please try again later...");
      }
      
      private function _getImagePath(isFolder:Boolean,imageType:String=''):String
      {
        if (isFolder)
        	//return '/template/shared/images/icons/folder.gif';
          return 'http://www.mybloop.com/template/shared/images/icons/folder.gif';
        else
        	//return '/template/shared/images/icons/16x16/' + imageType + '.gif';
          return 'http://www.mybloop.com/template/shared/images/icons/16x16/' + imageType + '.gif';
      }
      
      private function _convertSize(sSize:String):String
      {
        var sizeText:String = 'N/A';
        var size:Number = parseInt(sSize);
        
        if (size >= 1099511627776)
          sizeText = (size/1099511627776).toFixed(1) + ' TB';
        else if (size >= 1073741824)
          sizeText = (size/1073741824).toFixed(1) + ' GB';
        else if (size >= 1048576)
          sizeText = (size/1048576).toFixed(1) + ' MB';
        else if (size >= 1024)
          sizeText = (size/1024).toFixed(0) + ' KB';
        else if (size < 1024)
          sizeText = size + ' Bytes';
        
        return sizeText;
      }
      
      private function _revertToBytes(size:Array):Number
      {
        var bytes:Number;
        
        switch (size[1])
        {
          case 'TB':
            bytes = new Number(size[0])*1099511627776;
            break;
          case 'GB':
            bytes = new Number(size[0])*1073741824;
            break;
          case 'MB':
            bytes = new Number(size[0])*1048576;
            break;
          case 'KB':
            bytes = new Number(size[0])*1024;
            break;
          default:
            bytes = new Number(size[0]);
            break;
        }
        
        return bytes;
      }
      
      //-sorting functions
      private function _compareName(o1:Object,o2:Object):int
      {
        var returnStatus:int;
        
        //-folders are always shown first
        if ((o1.isFolder) && (!o2.isFolder))
        {
          returnStatus = -1;
        }
        else if ((!o1.isFolder) && (o2.isFolder))
        {
          returnStatus = 1;
        }
        else
        {
          var name1:String = String(o1.name).toUpperCase();
          var name2:String = String(o2.name).toUpperCase();
          
          if (name1 < name2)
            returnStatus = -1;
          else if (name1 > name2) 
            returnStatus = 1;
          else
            returnStatus = 0;
        }
        
        return returnStatus;
      }
      
      private function _compareType(o1:Object,o2:Object):int
      {
        var returnStatus:int;
        
        //-folders are always shown first
        if ((o1.isFolder) && (!o2.isFolder))
        {
          returnStatus = -1;
        }
        else if ((!o1.isFolder) && (o2.isFolder))
        {
          returnStatus = 1;
        }
        else
        {
          if (o1.type < o2.type)
            returnStatus = -1;
          else if (o1.type > o2.type) 
            returnStatus = 1;
          else
            returnStatus = 0;
        }
        
        return returnStatus;
      }
      
      private function _compareSize(o1:Object,o2:Object):int
      {
        var returnStatus:int;
        
        if ((o1.isFolder) && (!o2.isFolder))      //-one is file, othe is folder
        {
          returnStatus = -1;
        }
        else if ((!o1.isFolder) && (o2.isFolder))  //-one is folder, other is file
        {
          returnStatus = 1;
        }
        else if ((o1.isFolder) && (o2.isFolder))  //-both are folders
        {
          //-strip out the folder and files and sort based on the number of folders and files only
          var s1:String = new String(o1.size);
          var s2:String = new String(o2.size);
          
          s1 = s1.replace(/[^0-9]/g,'');
          s2 = s2.replace(/[^0-9]/g,'');
          
          if (Number(s1) < Number(s2))
            returnStatus = -1;
          else if (Number(s1) > Number(s2))
            returnStatus = 1;
          else
            returnStatus = 0;
        }
        else  //-both are files
        {
          //-break apart the size to number and unit
          var n1:Number = this._revertToBytes(new String(o1.size).split(' '));
          var n2:Number = this._revertToBytes(new String(o2.size).split(' '));
          
          if (n1 < n2)
            returnStatus = -1;
          else if (n1 > n2)
            returnStatus = 1;
          else
            returnStatus = 0;
        }
        
        return returnStatus;
      }
      
      private function _compareViews(o1:Object,o2:Object):int
      {
        var returnStatus:int;
        
        //-folders are always shown first
        if ((o1.isFolder) && (!o2.isFolder))
        {
          returnStatus = -1;
        }
        else if ((!o1.isFolder) && (o2.isFolder))
        {
          returnStatus = 1;
        }
        else
        {
          var n1:Number = new Number(o1.views);
          var n2:Number = new Number(o2.views);
          
          if (n1 < n2)
            returnStatus = -1;
          else if (n1 > n2) 
            returnStatus = 1;
          else
            returnStatus = 0;
        }
        
        return returnStatus;
      }
      
			private function _showDescriptionTip(item:Object):String
			{
				Alert.show('in here');
				//var descriptionString:String = item.Description;
				var descriptionString:String = 'this works!';
				return descriptionString;
			}
      
      //-event functions
      /**
       * function that fires custom event whenever the current selected directory changes
       */
      private function _fireBloopEvent(type:String):void
      {
        var bloopContentEvent:Event = new Event(type);
        dispatchEvent(bloopContentEvent);
      }
       
      private function _selectedRowChanged(e:ListEvent):void
      {
        this._fireBloopEvent('selectedRowChanged');
      }
          
      private function _rowDoubleClicked(e:ListEvent):void
      {
      	/**
      	 * in flex 2, rowIndex starts at 1...in flex 3 it starts at 0
      	 */
        var row:Object = this._contentData.getItemAt(e.rowIndex);
        var type:String;
        
        if (row.isFolder)
        {
          type = 'directoryDoubleClicked';
        }
        else
        {
          type = 'fileDoubleClicked';
        }
        
        this._fireBloopEvent(type);
      }
      
      private function _mouseOver(e:MouseEvent):void
      {
        this._lockHighlightChange = false;
      }
      
      private function _rowMouseOver(e:ListEvent):void
      {
      	/**
      	 * in flex 2, rowIndex starts at 1...in flex 3 it starts at 0
      	 */
        if (!this._lockHighlightChange)
          this._currentHighlightedRow = e.rowIndex;
      }
      
      private function _rowMouseOut(e:ListEvent):void
      {
        //-this was causing a timing issue, so disabled
        //this._currentHighlightedRow = -1;
      }
      
      private function _dragEntered(e:DragEvent):void
      {
        this._droppedRowIndex = -1;
        
      	var dropTarget:Box = e.currentTarget as Box;
      	dropTarget.drawFocus(true);
      	
      	DragManager.showFeedback(DragManager.MOVE);
  		  DragManager.acceptDragDrop(dropTarget);
      }
      
      private function _dragExited(e:DragEvent):void
      {
      	var dropTarget:Box = e.currentTarget as Box;
      	dropTarget.drawFocus(false);
      }
      
      private function _dragDropped(e:DragEvent):void
      {
      	var dropTarget:Box = e.currentTarget as Box;
      	dropTarget.drawFocus(false);
      	
      	this._droppedRowIndex = this.contentGrid.calculateDropIndex(e);
      	
        //-fire event
        var bloopTreeEvent:Event = new Event("itemDropped");
        dispatchEvent(bloopTreeEvent);
      }
      
      private function _dragComplete(e:DragEvent):void
      {
      }
      
      ///////////////////////////////////////////////////////////////////////////////////////////
      ///////////////////////////////////////////////////////////////////////////////////////////
      //-public functions
      
      public function initializeContent(userID:int,dataURL:String):void
      {
        this._DATA_URL = dataURL;
        this._USER_ID = userID;
        this._currentSortIndex = 0;
        this._descendingSort = false;
        
        this._contentArray = new Array();
        this._contentData = new ArrayCollection(this._contentArray);
       
        //this.loadContents(0);
      }
      
      public function getSelectedRow():Object
      {
        if (this.contentGrid.selectedIndex >= 0)
          return this._contentData.getItemAt(this.contentGrid.selectedIndex);
        else
          return null;
      }
      
      public function getMousedOverRow():Object
      {
        if (this._currentHighlightedRow >= 0)
          return this._contentData.getItemAt(this._currentHighlightedRow);
        else
          return null;
      }
      
      public function setHighlightChangeLock(lockValue:Boolean):void
      {
        this._lockHighlightChange = lockValue;
      }
      
      public function loadContents(directoryID:int):void
      {
        this._getData(directoryID);
      }
      
      public function getRowByIndex(index:int):Object
      {
        if (index < this._contentData.length)
          return this._contentData.getItemAt(index);
        else
          return null;
      }
      
      public function getIndexByRow(row:Object):int
      {
        return this._contentData.getItemIndex(row);
      }
      
      public function getDroppedRow():Object
      {
        if (this._droppedRowIndex >= 0)
          return this._contentData.getItemAt(this._droppedRowIndex);
        else
          return null;
      }
      
    ]]>
  </mx:Script>
  <mb:DataGrid x="0"
               y="0"
               width="100%"
               height="100%"
               dataProvider="{this._contentData}"
               dragProxyImage="scripts.extensions.CustomDragProxy"
               id="contentGrid"
               verticalGridLines="false"
               change="this._selectedRowChanged(event)"
               doubleClickEnabled="true"
               mouseOver="this._mouseOver(event)"
               itemDoubleClick="this._rowDoubleClicked(event)"
               itemRollOver="this._rowMouseOver(event)"
               itemRollOut="this._rowMouseOut(event)"
               styleName="contentGrid"
               >
    <mb:columns>
      <mx:DataGridColumn headerText="Name" dataField="name" itemRenderer="{nameRenderer}"/>
      <mx:DataGridColumn headerText="Type" dataField="type" editable="false" width="75" itemRenderer="{typeRenderer}" sortCompareFunction="_compareType"/>
      <mx:DataGridColumn headerText="Size" dataField="size" editable="false" width="100" itemRenderer="{sizeRenderer}" sortCompareFunction="_compareSize"/>
      <mx:DataGridColumn headerText="Views" dataField="views" editable="false" width="75" itemRenderer="{viewsRenderer}" sortCompareFunction="_compareViews"/>
    </mb:columns>
  </mb:DataGrid>

  <mx:Component id="nameRenderer">
    <mx:HBox horizontalAlign="left"
    		 verticalAlign="top"
    		 horizontalScrollPolicy="off"
    		 buttonMode="true"
    		 useHandCursor="true"
    		 mouseChildren="false"
    		 dragEnter="{data.dragEnter(event)}"
    		 dragExit="{data.dragExit(event)}"
    		 dragDrop="{data.dragDrop(event)}"
    		 dragComplete="{data.dragComplete(event)}"
    		 toolTip="{data.description}">
      <mx:Image source="{data.iconPath}" alpha="{data.alpha}"/>
      <mx:Label text="{data.name}" textAlign="left"/>
    </mx:HBox>
  </mx:Component>

  <mx:Component id="typeRenderer">
    <mx:Label text="{data.type}" textAlign="left"/>
  </mx:Component>
  <mx:Component id="sizeRenderer">
    <mx:Label text="{data.size}" textAlign="right"/>
  </mx:Component>
  <mx:Component id="viewsRenderer">
    <mx:Label text="{data.views}" textAlign="right"/>
  </mx:Component>
  <mx:HTTPService id="contentRequest" useProxy="false" method="POST" resultFormat="text" result="_loadData(event)" fault="_handleError(event)" />
</mx:Canvas>